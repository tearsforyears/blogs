C/C++

C
ascii为文件编码
编译
连接
执行
.c/.cpp--->.o/.obj
连接
多个obj经过连接器进行连接生成exe

linux
预编译
.c-->.i
编译
.c/.h-->.s
汇编
.s-->.o
连接
.o-->可执行文件

.h和.cpp
.h文件不能被编译
相当于声明在主文件的头部分
真正编译的是.h里面include的cpp

主要编译环境gcc unix类系统下的编译环境
MSVC 微软编译
-----------------------------------------------------------
python javascript php
解释性语言不需要经过编译就变成机器语言
不过在运行速度上会比编译语言来的更慢
需要解释环境
------------------------------------------------------------
半编译半解释语言java 这个应该是程序语言发展史上过渡语言
就和c在古代语言到程序语言规范变化的地位一样
java由java本身写的编译程序(java源码编译器)编译成字节码
传递给jvm(jvm拿C语言写的)
jvm经过优化生成binary code交给机器处理
前面的过程生成的字节码指的是 半编译
而字节码经过JVM交给机器处理这指的是 半解释
但是java不能控制句柄 相对来讲是高级语言 计算层次算底层
从另一个角度来说java程序的半编译半解释性(JVM)决定了java的跨平台
------------------------------------------------------------

从这个来分析下语言协作语言特性和其他一些东西


语言特性

汇编语言-机器语言:能反应计算机在电路上的操作
但是实际项目开发太大对于速度要求比较高的
比如即时战略可以用来写关键代码代替c++
提高运行效率 写机器码更快 01010100。。。 你要能调用随你便

编译性语言C/C++ C# VB
先来说c语系
C 可以直接反汇编 相当于对汇编进行了一个简单的封装
真正贴近程序开发语言有了程序化的概念,对内存调用进行了封装
但是又保留了内存调用最那啥的指针的和申请内存的函数
直接写c可以了解程序最底层的处理 这个指的是忽略掉内存处理那块的
精通c这个过程我就呵呵 javaweb对cgi表示呵呵呵
C++ c的扩展 主要用于底层的算法开发 用于图形学开发
(有分析 但被python在巨型数据的分析下完爆)
保留指针接近底层 相当于面向对象的c

VB 古老的语种 编程都还没规范

C#来自微软因为最近的跨平台和对某些动态页的平衡性和对底层(句柄控制)
//本人没写过 也没了解过 //从而比java更加接近底层一点

////
java
java凭借着JVM的设计让跨平台和通用性变成了后续语言设计的基石
常青树在近20年内的web领域占据绝对大头
虽然c#.net占据了一部分市场但是依然是大型架构比较低端处理一个好的语言
适合混合开发的结构性设计,适合处理不需要太大计算量的算法结构
可以单独用来写大型架构(理论上)
java在常青树这块的确做的好 在大数据 爬虫 机器学习上
都可以见java的身影 但这语言终究不适合做这块
本人觉得非常适合初学者入门 因为精通c的难度太大
但是精通java的难度相对没有那么大 
我认为java就是数据计算时代的c
因为他承接了编译性语言的高度封装化
虽然不能随便调用内存,但是在数据传输上和通用性上有目共睹
适合结构(数据结构和架构)的底层处理
给我的感觉是数据时代比较底层的语言
内存时代封装性非常强的语言
////

解释性语言 
javascript(web前端动态 node.js后台基于googleV8) 
python(搭载python平台很多 胶水(连接) 适合web 科学计算)
php 最适合小型的web 适合混合开发 天生设计给web开发



越接近解释性语言越近科学计算 
这个计算是指算法表达比较难的需要高度封装型同时对速度要求没那么快的
js依赖这个特点可以写出很复杂的动画特效
相反就可以知道越接近编译的语言的特点

